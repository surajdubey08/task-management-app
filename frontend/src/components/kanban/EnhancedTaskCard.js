import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { motion } from 'framer-motion';\nimport { \n  Calendar, \n  User, \n  Tag, \n  Clock, \n  AlertCircle, \n  MessageSquare,\n  Paperclip,\n  Eye,\n  Edit,\n  MoreHorizontal,\n  CheckSquare,\n  Square,\n  Zap,\n  Flag\n} from 'lucide-react';\nimport { formatDistanceToNow, isAfter, isBefore, addDays } from 'date-fns';\n\nconst EnhancedTaskCard = ({ \n  task, \n  users, \n  categories, \n  isSelected, \n  onSelection, \n  bulkOperationMode, \n  compactMode, \n  isDragging \n}) => {\n  const [showActions, setShowActions] = useState(false);\n  \n  // Get associated user and category\n  const assignedUser = users.find(u => u.id === task.assignedUserId);\n  const category = categories.find(c => c.id === task.categoryId);\n  \n  // Priority configuration\n  const priorityConfig = {\n    0: { label: 'Low', color: 'bg-green-100 text-green-800 border-green-200', icon: 'ðŸ”¹' },\n    1: { label: 'Medium', color: 'bg-yellow-100 text-yellow-800 border-yellow-200', icon: 'ðŸ”¸' },\n    2: { label: 'High', color: 'bg-red-100 text-red-800 border-red-200', icon: 'ðŸ”´' }\n  };\n  \n  const priority = priorityConfig[task.priority] || priorityConfig[0];\n  \n  // Due date status\n  const getDueDateStatus = () => {\n    if (!task.dueDate) return null;\n    \n    const dueDate = new Date(task.dueDate);\n    const now = new Date();\n    const tomorrow = addDays(now, 1);\n    \n    if (isBefore(dueDate, now) && task.status !== 2) {\n      return { type: 'overdue', color: 'text-red-600', bg: 'bg-red-50 border-red-200' };\n    } else if (isBefore(dueDate, tomorrow)) {\n      return { type: 'due-soon', color: 'text-orange-600', bg: 'bg-orange-50 border-orange-200' };\n    } else {\n      return { type: 'normal', color: 'text-gray-600', bg: 'bg-gray-50 border-gray-200' };\n    }\n  };\n  \n  const dueDateStatus = getDueDateStatus();\n  \n  // Handle task selection\n  const handleSelection = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    onSelection(task.id, !isSelected);\n  };\n  \n  // Handle quick actions\n  const handleQuickAction = (action, e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    switch (action) {\n      case 'view':\n        window.open(`/tasks/${task.id}`, '_blank');\n        break;\n      case 'edit':\n        window.open(`/tasks/${task.id}/edit`, '_blank');\n        break;\n      default:\n        console.log('Action:', action);\n    }\n  };\n  \n  if (compactMode) {\n    return (\n      <motion.div\n        layout\n        whileHover={{ scale: isDragging ? 1 : 1.02 }}\n        className={`group relative bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-3 shadow-sm hover:shadow-md transition-all duration-200 cursor-pointer ${\n          isSelected ? 'ring-2 ring-blue-500 border-blue-300' : ''\n        } ${isDragging ? 'shadow-2xl rotate-1' : ''}`}\n        onMouseEnter={() => setShowActions(true)}\n        onMouseLeave={() => setShowActions(false)}\n      >\n        {/* Compact Header */}\n        <div className=\"flex items-start justify-between gap-2\">\n          <div className=\"flex items-start gap-2 flex-1 min-w-0\">\n            {bulkOperationMode && (\n              <button\n                onClick={handleSelection}\n                className=\"mt-1 p-0.5 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors\"\n              >\n                {isSelected ? (\n                  <CheckSquare className=\"h-4 w-4 text-blue-600\" />\n                ) : (\n                  <Square className=\"h-4 w-4 text-gray-400\" />\n                )}\n              </button>\n            )}\n            \n            <div className=\"flex-1 min-w-0\">\n              <h4 className=\"font-medium text-gray-900 dark:text-white text-sm line-clamp-2 leading-tight\">\n                {task.title}\n              </h4>\n              \n              <div className=\"flex items-center gap-2 mt-1\">\n                {/* Priority indicator */}\n                <span className={`inline-flex items-center px-1.5 py-0.5 rounded text-xs font-medium border ${priority.color}`}>\n                  {priority.icon}\n                </span>\n                \n                {/* Assignee */}\n                {assignedUser && (\n                  <div className=\"flex items-center gap-1 text-xs text-gray-500\">\n                    <User className=\"h-3 w-3\" />\n                    <span className=\"truncate max-w-16\">{assignedUser.name.split(' ')[0]}</span>\n                  </div>\n                )}\n                \n                {/* Due date */}\n                {task.dueDate && (\n                  <div className={`flex items-center gap-1 text-xs ${dueDateStatus?.color}`}>\n                    <Clock className=\"h-3 w-3\" />\n                    <span>{formatDistanceToNow(new Date(task.dueDate), { addSuffix: true })}</span>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n          \n          {/* Quick actions */}\n          {showActions && !bulkOperationMode && (\n            <motion.div\n              initial={{ opacity: 0, scale: 0.8 }}\n              animate={{ opacity: 1, scale: 1 }}\n              className=\"flex items-center gap-1\"\n            >\n              <button\n                onClick={(e) => handleQuickAction('view', e)}\n                className=\"p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors\"\n                title=\"View task\"\n              >\n                <Eye className=\"h-3 w-3 text-gray-500\" />\n              </button>\n              <button\n                onClick={(e) => handleQuickAction('edit', e)}\n                className=\"p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors\"\n                title=\"Edit task\"\n              >\n                <Edit className=\"h-3 w-3 text-gray-500\" />\n              </button>\n            </motion.div>\n          )}\n        </div>\n      </motion.div>\n    );\n  }\n  \n  return (\n    <motion.div\n      layout\n      whileHover={{ scale: isDragging ? 1 : 1.02 }}\n      className={`group relative bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-4 shadow-sm hover:shadow-lg transition-all duration-200 cursor-pointer ${\n        isSelected ? 'ring-2 ring-blue-500 border-blue-300' : ''\n      } ${isDragging ? 'shadow-2xl rotate-2 scale-105' : ''}`}\n      onMouseEnter={() => setShowActions(true)}\n      onMouseLeave={() => setShowActions(false)}\n    >\n      {/* Card Header */}\n      <div className=\"flex items-start justify-between gap-3 mb-3\">\n        <div className=\"flex items-start gap-2 flex-1 min-w-0\">\n          {bulkOperationMode && (\n            <button\n              onClick={handleSelection}\n              className=\"mt-1 p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors\"\n            >\n              {isSelected ? (\n                <CheckSquare className=\"h-4 w-4 text-blue-600\" />\n              ) : (\n                <Square className=\"h-4 w-4 text-gray-400\" />\n              )}\n            </button>\n          )}\n          \n          <div className=\"flex-1 min-w-0\">\n            <h4 className=\"font-semibold text-gray-900 dark:text-white text-sm line-clamp-2 leading-tight mb-1\">\n              {task.title}\n            </h4>\n            \n            {task.description && (\n              <p className=\"text-xs text-gray-600 dark:text-gray-400 line-clamp-2 leading-relaxed\">\n                {task.description}\n              </p>\n            )}\n          </div>\n        </div>\n        \n        {/* Priority indicator */}\n        <div className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium border ${priority.color} flex-shrink-0`}>\n          <span className=\"mr-1\">{priority.icon}</span>\n          {priority.label}\n        </div>\n      </div>\n      \n      {/* Task metadata */}\n      <div className=\"space-y-2\">\n        {/* Category */}\n        {category && (\n          <div className=\"flex items-center gap-2\">\n            <div \n              className=\"w-2 h-2 rounded-full flex-shrink-0\" \n              style={{ backgroundColor: category.color }}\n            />\n            <span className=\"text-xs text-gray-600 dark:text-gray-400 truncate\">\n              {category.name}\n            </span>\n          </div>\n        )}\n        \n        {/* Assignee */}\n        {assignedUser && (\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-6 h-6 bg-gray-300 dark:bg-gray-600 rounded-full flex items-center justify-center flex-shrink-0\">\n              <User className=\"h-3 w-3 text-gray-600 dark:text-gray-300\" />\n            </div>\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-xs font-medium text-gray-900 dark:text-white truncate\">\n                {assignedUser.name}\n              </p>\n              <p className=\"text-xs text-gray-500 dark:text-gray-400 truncate\">\n                {assignedUser.email}\n              </p>\n            </div>\n          </div>\n        )}\n        \n        {/* Due date */}\n        {task.dueDate && (\n          <div className={`flex items-center gap-2 p-2 rounded-lg border ${dueDateStatus?.bg} ${dueDateStatus?.color}`}>\n            <Clock className=\"h-3 w-3 flex-shrink-0\" />\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-xs font-medium\">\n                {dueDateStatus?.type === 'overdue' ? 'Overdue' : \n                 dueDateStatus?.type === 'due-soon' ? 'Due Soon' : 'Due'}\n              </p>\n              <p className=\"text-xs opacity-75\">\n                {formatDistanceToNow(new Date(task.dueDate), { addSuffix: true })}\n              </p>\n            </div>\n            {dueDateStatus?.type === 'overdue' && (\n              <AlertCircle className=\"h-3 w-3 text-red-500 flex-shrink-0\" />\n            )}\n          </div>\n        )}\n      </div>\n      \n      {/* Task stats */}\n      <div className=\"flex items-center justify-between mt-3 pt-3 border-t border-gray-100 dark:border-gray-700\">\n        <div className=\"flex items-center gap-3 text-xs text-gray-500 dark:text-gray-400\">\n          {/* Comments count */}\n          <div className=\"flex items-center gap-1\">\n            <MessageSquare className=\"h-3 w-3\" />\n            <span>{task.commentsCount || 0}</span>\n          </div>\n          \n          {/* Attachments count */}\n          <div className=\"flex items-center gap-1\">\n            <Paperclip className=\"h-3 w-3\" />\n            <span>{task.attachmentsCount || 0}</span>\n          </div>\n          \n          {/* Created date */}\n          <span>{formatDistanceToNow(new Date(task.createdAt))} ago</span>\n        </div>\n        \n        {/* Quick actions */}\n        {showActions && !bulkOperationMode && (\n          <motion.div\n            initial={{ opacity: 0, scale: 0.8 }}\n            animate={{ opacity: 1, scale: 1 }}\n            className=\"flex items-center gap-1\"\n          >\n            <Link\n              to={`/tasks/${task.id}`}\n              onClick={(e) => e.stopPropagation()}\n              className=\"p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors\"\n              title=\"View task\"\n            >\n              <Eye className=\"h-3 w-3 text-gray-500\" />\n            </Link>\n            <Link\n              to={`/tasks/${task.id}/edit`}\n              onClick={(e) => e.stopPropagation()}\n              className=\"p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors\"\n              title=\"Edit task\"\n            >\n              <Edit className=\"h-3 w-3 text-gray-500\" />\n            </Link>\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                setShowActions(false);\n              }}\n              className=\"p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors\"\n              title=\"More options\"\n            >\n              <MoreHorizontal className=\"h-3 w-3 text-gray-500\" />\n            </button>\n          </motion.div>\n        )}\n      </div>\n      \n      {/* Drag indicator */}\n      {isDragging && (\n        <div className=\"absolute inset-0 bg-blue-500 bg-opacity-10 border-2 border-blue-500 border-dashed rounded-xl pointer-events-none\" />\n      )}\n    </motion.div>\n  );\n};\n\nexport default EnhancedTaskCard;"
</invoke>